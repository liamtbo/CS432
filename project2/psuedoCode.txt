
join()
    get user
    get channel

    if user_sent
        print recv req join
    if server_sent
        print recv S2S join

    if channel exists
        if user_sent
            add user to channel, increment
            send_join_adjacent()

        if server sent
            if server_sent is in channels server:
                server_sent.time update
            else:
                add server_send to channel
    if channel does not exist
        add channel, increment
        get specified channel again
        create packet_src_server

        if user_sent
            add user channel, increment

        if server_sent
            if server isn't subbed to channel
                sub server to channel, increment

        sned_join_adjacent()


send_join_adjacent
    for every adjacent server
        flag = 0
        for every server in channel
            if channel server == adj server
                flag = 1
            if flag == 0 or if user sent
                send join
                sub adj serve to channel, increment

say()
    if user_sent
        get user
        build txt_say
        build s2sSay
    if server_sent
        check ID
        make ID list bigger if needed
        build txt_say
    get channel
    if only packet src server is subbed to channel and 0 users are subbed to channel
        send s2s leave chanenl to packet src
        unsub packet src server
        remove channel
        return
    for each local user in say channel
        send txt_say
    for each server subbed to say channel
        sens s2s say

leave()
    if user_sent
        remove user from channel
    if server_sent
        remove src_packet_server
    if channel has 0 users and the only has one server subbed to channel
        send leave channel to that one server